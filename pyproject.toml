[build-system]
requires = ["setuptools>=68.0.0", "wheel>=0.42.0"]
build-backend = "setuptools.build_meta"

[project]
name = "rs-personal-assistant"
version = "0.1.0"
description = "A privacy-first, local AI-powered personal assistant platform"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "RS Personal Assistant Team"},
]
keywords = [
    "ai", "assistant", "personal", "privacy", "local", "llm", "ollama", "agent"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "pydantic>=2.5.0",
    "pydantic-settings>=2.10.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "langchain>=0.1.0",
    "langchain-ollama>=0.1.0",
    "streamlit>=1.28.0",
    "aiosqlite>=0.19.0",
    "structlog>=23.2.0",
    "cryptography>=41.0.0",
    "google-auth>=2.24.0",
    "google-auth-oauthlib>=1.1.0",
    "google-auth-httplib2>=0.1.1",
    "google-api-python-client>=2.108.0",
    "pyyaml>=6.0.1",
    "click>=8.1.0",
    "python-multipart>=0.0.6",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.0.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "freezegun>=1.2.0",
    "responses>=0.23.0",
    "testcontainers>=3.7.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

build = [
    "pyinstaller>=6.0.0",
    "wheel>=0.42.0",
    "twine>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/roostership/rs_pa"
Repository = "https://github.com/roostership/rs_pa"
Documentation = "https://roostership.github.io/rs_pa"
Issues = "https://github.com/roostership/rs_pa/issues"

[project.scripts]
rs-pa = "rs_pa.main:main"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["rs_pa", "agents", "core", "models", "ui"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=rs_pa",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["rs_pa", "agents", "core", "models", "ui"]
omit = [
    "tests/*",
    "setup.py",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "alembic.*",
]
ignore_errors = true